# encoding: utf-8

require "../../lib/geodelta"

task :default => :all
task :all => ["level1.svg", "level2.svg", "level3.svg", "level4.svg"]

def get_coordinates(ids)
  return GeoDelta::DeltaGeometry.get_coordinates(ids).map { |x, y| [x, -y] }
end

def write_svg(deltas, io)
  xs    = deltas.map { |delta| delta[:points].map { |x, y| x } }.flatten
  ys    = deltas.map { |delta| delta[:points].map { |x, y| y } }.flatten
  x_min = xs.min
  x_max = xs.max
  y_min = ys.min
  y_max = ys.max
  dx    = x_max - x_min
  dy    = y_max - y_min

  io.puts(%|<?xml version="1.0" encoding="utf-8"?>|)
  io.puts(%|<svg width="190mm" height="190mm" viewBox="#{x_min} #{y_min} #{dx} #{dy}" xmlns="http://www.w3.org/2000/svg">|)
  deltas.each { |delta|
    polygon_points = delta[:points][1, 3].map { |x, y| "#{x},#{y}" }.join(" ")
    polygon_color  = delta[:color]
    polygon_width  = delta[:width]
    io.puts(%| <polygon points="#{polygon_points}" fill="none" stroke="#{polygon_color}" stroke-width="#{polygon_width}" />|)

    if delta[:label]
      label_x    = delta[:points][0][0]
      label_y    = delta[:points][0][1]
      label_text = delta[:label][:text]
      label_size = delta[:label][:size]
      io.puts(%| <text x="#{label_x}" y="#{label_y}" font-size="#{label_size}" text-anchor="middle" dominant-baseline="central">#{label_text}</text>|)
    end
  }
  io.puts(%|</svg>|)
end

file "level1.svg" => ["Rakefile"] do |t|
  deltas = []
  (0..7).each { |id1|
    ids = [id1]
    deltas << {
      :points => get_coordinates(ids),
      :color  => "black",
      :width  => 0.2,
      :label  => {
        :text => ids.join(","),
        :size => 4,
      },
    }
  }

  File.open(t.name, "wb") { |file|
    write_svg(deltas, file)
  }
end

file "level2.svg" => ["Rakefile"] do |t|
  deltas = []
  (0..7).each { |id1|
    (0..3).each { |id2|
      ids = [id1, id2]
      deltas << {
        :points => get_coordinates(ids),
        :color  => "black",
        :width  => 0.1,
        :label  => {
          :text => ids.join(","),
          :size => 2,
        },
      }
    }

    deltas << {
      :points => get_coordinates([id1]),
      :color  => "black",
      :width  => 0.2,
    }
  }

  File.open(t.name, "wb") { |file|
    write_svg(deltas, file)
  }
end

file "level3.svg" => ["Rakefile"] do |t|
  deltas = []
  (0..7).each { |id1|
    (0..3).each { |id2|
      (0..3).each { |id3|
        ids = [id1, id2, id3]
        deltas << {
          :points => get_coordinates(ids),
          :color  => "black",
          :width  => 0.05,
          :label  => {
            :text => ids.join(","),
            :size => 0.75,
          },
        }
      }

      deltas << {
        :points => get_coordinates([id1, id2]),
        :color  => "black",
        :width  => 0.1,
      }
    }

    deltas << {
      :points => get_coordinates([id1]),
      :color  => "black",
      :width  => 0.2,
    }
  }

  File.open(t.name, "wb") { |file|
    write_svg(deltas, file)
  }
end

file "level4.svg" => ["Rakefile"] do |t|
  deltas = []
  (0..7).each { |id1|
    (0..3).each { |id2|
      (0..3).each { |id3|
        (0..3).each { |id4|
          ids = [id1, id2, id3, id4]
          deltas << {
            :points => get_coordinates(ids),
            :color  => "black",
            :width  => 0.025,
            :label  => {
              :text => ids.join(","),
              :size => 0.25,
            },
          }
        }

        deltas << {
          :points => get_coordinates([id1, id2, id3]),
          :color  => "black",
          :width  => 0.05,
        }
      }

      deltas << {
        :points => get_coordinates([id1, id2]),
        :color  => "black",
        :width  => 0.1,
      }
    }

    deltas << {
      :points => get_coordinates([id1]),
      :color  => "black",
      :width  => 0.2,
    }
  }

  File.open(t.name, "wb") { |file|
    write_svg(deltas, file)
  }
end
